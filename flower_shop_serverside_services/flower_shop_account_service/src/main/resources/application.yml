##########################################################
##########     Application file properties      ##########
##########     security/qr/datasource/custom    ##########
##########################################################

##################### SERVER PROP #################################
server:
  port: 8081
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

##################### SPRING GLOBAL #################################
spring:

  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB
  main:
    allow-bean-definition-overriding: true #important for security part
  ##################### DATA SOURCE #################################
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 100
    initialization-mode: always
    ##################### MY SQL DATABASE #################################
    url: jdbc:mysql://localhost:3306/flower_shop_account?serverTimezone=Europe/Moscow
    password: 1111
    username: root
  ##################### JPA USED SPRING DATA #################################
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      format-sql: true
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        event:
          merge:
            entity_copy_observer: allow
      use_sql_comments: true
    show-sql: true
  ##################### SPRING MAIL PROPERTIES #################################
  mail:
    host: smtp.mail.ru
    password: 1999WarehouseLogistic
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          connectiontimeout: 5000
          starttls:
            enable: true
            required: true
          timeout: 5000
          writetimeout: 5000
    username: warehouse_logistic_worker@inbox.ru
  messages:
    basename: messages
    encoding: UTF-8


  ####################### SECURITY ############################

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 333581601253-4vmmr5lpd2muvdhmf2817e31eud7kj75.apps.googleusercontent.com
            clientSecret: Llz9IorZo-k0aynDpsVG9WXD
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          github:
            clientId: 0c3eb89b0213b375da01
            clientSecret: 63ab3acb54954e9e9de80f4538145498658393bd
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
##################### custom for security #################################
security-token-app:
  auth:
    accessTokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    accessTokenExpirationMsec: 60000000 #60000=one minute; remove one 0 and show tokes death

    refreshTokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    refreshTokenExpirationMsec: 120000000 #one minute; remove one 0 and show tokes death

  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect


